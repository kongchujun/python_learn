# 在 main.py 中完全替换 list_folders 方法
@app.get("/api/folders", response_model=FoldersResponse)
async def list_folders():
    try:
        # 使用 Delimiter 参数获取第一层目录结构
        response = s3_client.list_objects_v2(
            Bucket=S3_BUCKET_NAME,
            Delimiter='/',  # 使用分隔符获取文件夹结构
            MaxKeys=1000
        )
        
        folder_counts = {}
        
        # 处理 CommonPrefixes (文件夹)
        if 'CommonPrefixes' in response:
            for prefix_info in response['CommonPrefixes']:
                folder_name = prefix_info['Prefix'].rstrip('/')
                
                # 获取该文件夹下的文件数量
                folder_response = s3_client.list_objects_v2(
                    Bucket=S3_BUCKET_NAME,
                    Prefix=f"{folder_name}/",
                    MaxKeys=1000  # 可以根据需要调整
                )
                
                file_count = len(folder_response.get('Contents', []))
                if file_count > 0:
                    folder_counts[folder_name] = file_count
        
        # 处理根目录文件
        if 'Contents' in response:
            root_files = [obj for obj in response['Contents'] if '/' not in obj['Key']]
            if root_files:
                folder_counts['根目录'] = len(root_files)
        
        # 转换为列表并排序
        folders = [
            FolderInfo(name=name, count=count) 
            for name, count in sorted(folder_counts.items())
        ]

        logger.info(f"Found {len(folders)} folders using delimiter method")
        return FoldersResponse(folders=folders)

    except ClientError as e:
        logger.error(f"S3 error: {e}")
        raise HTTPException(status_code=500, detail=f"S3 error: {str(e)}")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")
