# app.py
from fastapi import FastAPI, Depends, Request
from fastapi.middleware.cors import CORSMiddleware
from langchain_mcp_adapters.sse.fastapi import mcpsse_router
from langchain_mcp import mcp
from langchain_core.runnables import RunnableConfig
from langchain_core.output_parsers import StrOutputParser
from langchain_postgres import PostgresEngine
import os
from typing import Dict, List, Any, Optional
from pydantic import BaseModel

app = FastAPI()

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# PostgreSQL configuration
POSTGRES_HOST = os.getenv("POSTGRES_HOST", "localhost")
POSTGRES_PORT = os.getenv("POSTGRES_PORT", "5432")
POSTGRES_USER = os.getenv("POSTGRES_USER", "postgres")
POSTGRES_PASSWORD = os.getenv("POSTGRES_PASSWORD", "postgres")
POSTGRES_DB = os.getenv("POSTGRES_DB", "postgres")

# Initialize PostgreSQL engine
postgres_connection_string = f"postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}@{POSTGRES_HOST}:{POSTGRES_PORT}/{POSTGRES_DB}"
postgres_engine = PostgresEngine(postgres_connection_string)

# app.py (continued)
class PostgresQueryInput(BaseModel):
    query: str
    parameters: Optional[Dict[str, Any]] = None

@mcp.run(transport="streamable-http")
async def postgres_query(input_data: PostgresQueryInput, config: Optional[RunnableConfig] = None):
    """
    Executes a SQL query on PostgreSQL database and returns the results.
    
    Args:
        input_data: PostgresQueryInput containing the query and optional parameters
        config: Optional configuration for the runnable
        
    Returns:
        Query results as a list of dictionaries or a formatted string
    """
    query = input_data.query
    parameters = input_data.parameters or {}
    
    # Execute the query
    results = postgres_engine.query(query, parameters=parameters)
    
    # Stream the results
    if isinstance(results, list):
        for row in results:
            yield str(row) + "\n"
    else:
        yield str(results)


# app.py (continued)
# Add the MCP SSE router
app.include_router(
    mcpsse_router(
        mcp_runnable=postgres_query,
        path="/postgres-query",
        name="postgres_query",
        description="PostgreSQL query endpoint with streaming via SSE"
    )
)

# Add a simple health check endpoint
@app.get("/health")
async def health_check():
    return {"status": "healthy", "service": "postgres-mcp"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("app:app", host="0.0.0.0", port=8000, reload=True)


# requirements.txt
fastapi>=0.100.0
uvicorn>=0.22.0
langchain-mcp>=0.0.4
langchain-mcp-adapters>=0.0.1
langchain-postgres>=0.0.1
langchain-core>=0.1.0
psycopg2-binary>=2.9.6
