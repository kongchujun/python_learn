import os
import asyncio
from fastapi import FastAPI
from contextlib import asynccontextmanager
import asyncpg
import orjson
import structlog

_pg_pool = None
current_password = None

async def get_new_password():
    # 这里是获取密码的代码，具体实现需要根据你的情况修改
    return "your_new_password"

async def create_pool():
    global _pg_pool, current_password
    if _pg_pool:
        await _pg_pool.close()
    _pg_pool = await asyncpg.create_pool(
        database=os.environ["POSTGRES_DB"],
        user=os.environ["POSTGRES_USER"],
        password=current_password,
        host=os.environ["POSTGRES_HOST"],
        port=os.environ["POSTGRES_PORT"],
        init=_init_connection,
    )

async def _init_connection(conn):
    # 你之前定义的初始化连接的方法
    await conn.set_type_codec(
        "json",
        encoder=lambda v: orjson.dumps(v).decode(),
        decoder=orjson.loads,
        schema="pg_catalog",
    )
    await conn.set_type_codec(
        "jsonb",
        encoder=lambda v: orjson.dumps(v).decode(),
        decoder=orjson.loads,
        schema="pg_catalog",
    )
    await conn.set_type_codec(
        "uuid", encoder=lambda v: str(v), decoder=lambda v: v, schema="pg_catalog"
    )

@asynccontextmanager
async def lifespan(app: FastAPI):
    global current_password
    current_password = await get_new_password()
    await create_pool()
    task = asyncio.create_task(schedule_password_update())

    structlog.configure(
        # 日志配置部分保持不变
    )

    yield
    task.cancel()
    await _pg_pool.close()
    _pg_pool = None

async def schedule_password_update():
    while True:
        await asyncio.sleep(3600)  # 每小时更新一次密码
        new_password = await get_new_password()
        if new_password != current_password:
            current_password = new_password
            await create_pool()

def get_pg_pool() -> asyncpg.pool.Pool:
    return _pg_pool
