duckdb-mcp-sse/
├── pyproject.toml
├── requirements.txt
├── src/
│   ├── __init__.py
│   ├── main.py
│   ├── server.py
│   └── duckdb_handler.py
└── README.md


toml
[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "duckdb-mcp-sse"
version = "1.0.0"
description = "A Model Context Protocol (MCP) server implementation for DuckDB with SSE support"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "mcp>=1.0.0",
    "duckdb>=0.9.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.20.0",
    "pydantic>=2.0.0",
    "anyio>=3.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
]

[project.scripts]
duckdb-mcp-sse = "duckdb_mcp_sse.main:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

requiremen.txt
mcp>=1.0.0
duckdb>=0.9.0
fastapi>=0.100.0
uvicorn>=0.20.0
pydantic>=2.0.0
anyio>=3.0.0

src/duckdb_handler.py
import asyncio
import logging
from typing import Any, Dict, List, Optional, Union
import duckdb
from contextlib import asynccontextmanager

logger = logging.getLogger(__name__)

class DuckDBHandler:
    """Handler for DuckDB operations with connection management."""
    
    def __init__(
        self, 
        database_path: str = ":memory:", 
        persist_connection: bool = False,
        read_only: bool = False
    ):
        self.database_path = database_path
        self.persist_connection = persist_connection
        self.read_only = read_only
        self._connection: Optional[duckdb.DuckDBPyConnection] = None
        self._lock = asyncio.Lock()
        
        if self.persist_connection:
            self._connection = self._create_connection()
    
    def _create_connection(self) -> duckdb.DuckDBPyConnection:
        """Create a new DuckDB connection."""
        return duckdb.connect(
            database=self.database_path,
            read_only=self.read_only
        )
    
    @asynccontextmanager
    async def get_connection(self):
        """Get a connection with proper lifecycle management."""
        async with self._lock:
            if self.persist_connection and self._connection:
                yield self._connection
            else:
                conn = self._create_connection()
                try:
                    yield conn
                finally:
                    if not self.persist_connection:
                        conn.close()
    
    async def execute_query(
        self, 
        query: str, 
        parameters: Optional[List[Any]] = None
    ) -> Dict[str, Any]:
        """Execute a query and return results."""
        try:
            async with self.get_connection() as conn:
                if parameters:
                    result = conn.execute(query, parameters).fetchall()
                else:
                    result = conn.execute(query).fetchall()
                
                # Get column names
                description = conn.description
                columns = [desc[0] for desc in description] if description else []
                
                # Convert to list of dictionaries
                rows = []
                for row in result:
                    rows.append(dict(zip(columns, row)))
                
                return {
                    "success": True,
                    "rows": rows,
                    "row_count": len(rows),
                    "columns": columns
                }
        
        except Exception as e:
            logger.error(f"Query execution failed: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "rows": [],
                "row_count": 0,
                "columns": []
            }
    
    async def get_schema_info(self, schema_name: Optional[str] = None) -> Dict[str, Any]:
        """Get schema information."""
        try:
            queries = []
            
            if schema_name:
                # Get tables in specific schema
                queries.append(f"""
                    SELECT table_name, table_type 
                    FROM information_schema.tables 
                    WHERE table_schema = '{schema_name}'
                    ORDER BY table_name
                """)
            else:
                # Get all schemas
                queries.append("""
                    SELECT DISTINCT table_schema as schema_name
                    FROM information_schema.tables
                    WHERE table_schema NOT IN ('information_schema', 'pg_catalog')
                    ORDER BY schema_name
                """)
                
                # Get all tables
                queries.append("""
                    SELECT table_schema, table_name, table_type
                    FROM information_schema.tables
                    WHERE table_schema NOT IN ('information_schema', 'pg_catalog')
                    ORDER BY table_schema, table_name
                """)
            
            results = {}
            async with self.get_connection() as conn:
                for i, query in enumerate(queries):
                    result = conn.execute(query).fetchall()
                    description = conn.description
                    columns = [desc[0] for desc in description] if description else []
                    
                    rows = []
                    for row in result:
                        rows.append(dict(zip(columns, row)))
                    
                    results[f"query_{i}"] = {
                        "rows": rows,
                        "columns": columns
                    }
            
            return {
                "success": True,
                "schema_info": results
            }
        
        except Exception as e:
            logger.error(f"Schema info retrieval failed: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "schema_info": {}
            }
    
    async def get_table_info(self, table_name: str, schema_name: Optional[str] = None) -> Dict[str, Any]:
        """Get detailed table information."""
        try:
            full_table_name = f"{schema_name}.{table_name}" if schema_name else table_name
            
            # Get column information
            query = f"DESCRIBE {full_table_name}"
            
            async with self.get_connection() as conn:
                result = conn.execute(query).fetchall()
                description = conn.description
                columns = [desc[0] for desc in description] if description else []
                
                column_info = []
                for row in result:
                    column_info.append(dict(zip(columns, row)))
                
                # Get row count
                count_result = conn.execute(f"SELECT COUNT(*) FROM {full_table_name}").fetchone()
                row_count = count_result[0] if count_result else 0
                
                return {
                    "success": True,
                    "table_name": table_name,
                    "schema_name": schema_name,
                    "columns": column_info,
                    "row_count": row_count
                }
        
        except Exception as e:
            logger.error(f"Table info retrieval failed: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "table_name": table_name,
                "schema_name": schema_name,
                "columns": [],
                "row_count": 0
            }
    
    def close(self):
        """Close the persistent connection if it exists."""
        if self._connection:
            self._connection.close()
            self._connection = None

src/server.py
import asyncio
import json
import logging
from typing import Any, Dict, Optional
from mcp.server.models import InitializationOptions
from mcp.server import NotificationOptions, Server
from mcp.types import (
    Resource, 
    Tool, 
    TextContent, 
    ImageContent, 
    EmbeddedResource
)
from pydantic import AnyUrl
from .duckdb_handler import DuckDBHandler

logger = logging.getLogger(__name__)

class DuckDBMCPServer:
    """MCP Server for DuckDB with SSE support."""
    
    def __init__(
        self, 
        database_path: str = ":memory:",
        persist_connection: bool = False,
        read_only: bool = False
    ):
        self.db_handler = DuckDBHandler(
            database_path=database_path,
            persist_connection=persist_connection,
            read_only=read_only
        )
        self.server = Server("duckdb-mcp-server")
        self._setup_handlers()
    
    def _setup_handlers(self):
        """Setup MCP server handlers."""
        
        @self.server.list_resources()
        async def handle_list_resources() -> list[Resource]:
            """List available database resources."""
            return [
                Resource(
                    uri=AnyUrl("duckdb://schema"),
                    name="Database Schema",
                    description="Information about database schemas and tables",
                    mimeType="application/json",
                ),
                Resource(
                    uri=AnyUrl("duckdb://tables"),
                    name="Database Tables",
                    description="List of all tables in the database",
                    mimeType="application/json",
                ),
            ]
        
        @self.server.read_resource()
        async def handle_read_resource(uri: AnyUrl) -> str:
            """Read a database resource."""
            uri_str = str(uri)
            
            if uri_str == "duckdb://schema":
                result = await self.db_handler.get_schema_info()
                return json.dumps(result, indent=2)
            
            elif uri_str == "duckdb://tables":
                result = await self.db_handler.get_schema_info()
                return json.dumps(result, indent=2)
            
            else:
                raise ValueError(f"Unknown resource: {uri}")
        
        @self.server.list_tools()
        async def handle_list_tools() -> list[Tool]:
            """List available tools."""
            return [
                Tool(
                    name="execute_query",
                    description="Execute a SQL query against the DuckDB database",
                    inputSchema={
                        "type": "object",
                        "properties": {
                            "query": {
                                "type": "string",
                                "description": "SQL query to execute"
                            },
                            "parameters": {
                                "type": "array",
                                "description": "Query parameters",
                                "items": {"type": "any"}
                            }
                        },
                        "required": ["query"]
                    }
                ),
                Tool(
                    name="get_schema",
                    description="Get database schema information",
                    inputSchema={
                        "type": "object",
                        "properties": {
                            "schema_name": {
                                "type": "string",
                                "description": "Optional schema name to filter results"
                            }
                        }
                    }
                ),
                Tool(
                    name="get_table_info",
                    description="Get detailed information about a specific table",
                    inputSchema={
                        "type": "object",
                        "properties": {
                            "table_name": {
                                "type": "string",
                                "description": "Name of the table"
                            },
                            "schema_name": {
                                "type": "string",
                                "description": "Optional schema name"
                            }
                        },
                        "required": ["table_name"]
                    }
                )
            ]
        
        @self.server.call_tool()
        async def handle_call_tool(name: str, arguments: dict) -> list[TextContent | ImageContent | EmbeddedResource]:
            """Handle tool calls."""
            
            if name == "execute_query":
                query = arguments.get("query")
                parameters = arguments.get("parameters")
                
                if not query:
                    return [TextContent(type="text", text="Error: No query provided")]
                
                result = await self.db_handler.execute_query(query, parameters)
                return [TextContent(type="text", text=json.dumps(result, indent=2))]
            
            elif name == "get_schema":
                schema_name = arguments.get("schema_name")
                result = await self.db_handler.get_schema_info(schema_name)
                return [TextContent(type="text", text=json.dumps(result, indent=2))]
            
            elif name == "get_table_info":
                table_name = arguments.get("table_name")
                schema_name = arguments.get("schema_name")
                
                if not table_name:
                    return [TextContent(type="text", text="Error: No table name provided")]
                
                result = await self.db_handler.get_table_info(table_name, schema_name)
                return [TextContent(type="text", text=json.dumps(result, indent=2))]
            
            else:
                return [TextContent(type="text", text=f"Unknown tool: {name}")]
    
    async def run_sse(self, host: str = "localhost", port: int = 8000):
        """Run the server in SSE mode."""
        from fastapi import FastAPI, Request
        from fastapi.responses import StreamingResponse
        from fastapi.middleware.cors import CORSMiddleware
        import uvicorn
        
        app = FastAPI(title="DuckDB MCP Server")
        
        # Add CORS middleware
        app.add_middleware(
            CORSMiddleware,
            allow_origins=["*"],
            allow_credentials=True,
            allow_methods=["*"],
            allow_headers=["*"],
        )
        
        @app.get("/sse")
        async def sse_endpoint(request: Request):
            """SSE endpoint for MCP communication."""
            
            async def event_stream():
                try:
                    # Handle MCP initialization
                    init_response = {
                        "jsonrpc": "2.0",
                        "result": {
                            "protocolVersion": "2024-11-05",
                            "capabilities": {
                                "resources": {"subscribe": True, "listChanged": True},
                                "tools": {},
                                "logging": {},
                            },
                            "serverInfo": {
                                "name": "duckdb-mcp-server",
                                "version": "1.0.0",
                            },
                        }
                    }
                    
                    yield f"data: {json.dumps(init_response)}\n\n"
                    
                    # Keep connection alive
                    while True:
                        if await request.is_disconnected():
                            break
                        
                        # Send heartbeat
                        heartbeat = {"type": "heartbeat", "timestamp": asyncio.get_event_loop().time()}
                        yield f"data: {json.dumps(heartbeat)}\n\n"
                        
                        await asyncio.sleep(30)  # Heartbeat every 30 seconds
                        
                except Exception as e:
                    logger.error(f"SSE stream error: {e}")
                    error_event = {"type": "error", "message": str(e)}
                    yield f"data: {json.dumps(error_event)}\n\n"
            
            return StreamingResponse(
                event_stream(),
                media_type="text/event-stream",
                headers={
                    "Cache-Control": "no-cache",
                    "Connection": "keep-alive",
                    "Access-Control-Allow-Origin": "*",
                }
            )
        
        @app.post("/mcp")
        async def mcp_endpoint(request: Request):
            """HTTP endpoint for MCP requests."""
            try:
                data = await request.json()
                # Handle MCP requests here
                # This is a simplified implementation
                response = {"jsonrpc": "2.0", "id": data.get("id"), "result": {}}
                return response
            except Exception as e:
                return {"jsonrpc": "2.0", "error": {"code": -1, "message": str(e)}}
        
        logger.info(f"Starting DuckDB MCP Server on {host}:{port}")
        logger.info(f"SSE endpoint: http://{host}:{port}/sse")
        logger.info(f"HTTP endpoint: http://{host}:{port}/mcp")
        
        config = uvicorn.Config(app, host=host, port=port, log_level="info")
        server = uvicorn.Server(config)
        await server.serve()
    
    def close(self):
        """Clean up resources."""
        self.db_handler.close()

src/main.py
import argparse
import asyncio
import logging
import sys
from typing import Optional
from .server import DuckDBMCPServer

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def main():
    """Main entry point."""
    parser = argparse.ArgumentParser(description="DuckDB MCP Server with SSE support")
    parser.add_argument(
        "--database", 
        "-d",
        default=":memory:",
        help="DuckDB database path (default: :memory:)"
    )
    parser.add_argument(
        "--host",
        default="localhost",
        help="Host to bind to (default: localhost)"
    )
    parser.add_argument(
        "--port",
        "-p",
        type=int,
        default=8000,
        help="Port to bind to (default: 8000)"
    )
    parser.add_argument(
        "--persist-connection",
        action="store_true",
        help="Persist database connection for the server lifetime"
    )
    parser.add_argument(
        "--read-only",
        action="store_true",
        help="Open database in read-only mode"
    )
    
    args = parser.parse_args()
    
    try:
        server = DuckDBMCPServer(
            database_path=args.database,
            persist_connection=args.persist_connection,
            read_only=args.read_only
        )
        
        logger.info("Starting DuckDB MCP Server...")
        await server.run_sse(host=args.host, port=args.port)
        
    except KeyboardInterrupt:
        logger.info("Shutting down...")
    except Exception as e:
        logger.error(f"Server error: {e}")
        sys.exit(1)

def run():
    """Synchronous entry point for console scripts."""
    asyncio.run(main())

if __name__ == "__main__":
    run()

src/init.py
"""DuckDB MCP Server with SSE support."""

from .server import DuckDBMCPServer
from .duckdb_handler import DuckDBHandler

__version__ = "1.0.0"
__all__ = ["DuckDBMCPServer", "DuckDBHandler"]

readme
# DuckDB MCP Server with SSE Support

A Model Context Protocol (MCP) server implementation for DuckDB with Server-Sent Events (SSE) support.

## Features

- **DuckDB Integration**: Full support for DuckDB operations
- **SSE Support**: Server-Sent Events for real-time communication
- **HTTP API**: RESTful endpoints for MCP communication
- **Connection Management**: Configurable connection persistence
- **Schema Introspection**: Automatic database schema discovery
- **Query Execution**: Safe parameterized query execution

## Installation

```bash
pip install -r requirements.txt
