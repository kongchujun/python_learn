你说得对！我在项目结构中提到了 `FileViewer.vue` 但没有提供具体代码。这里是完整的文件预览组件：

### frontend/src/components/FileViewer.vue

```vue
<template>
  <el-dialog
    v-model="visible"
    :title="file?.name || '文件预览'"
    width="80%"
    :before-close="handleClose"
    destroy-on-close
  >
    <div v-loading="loading" class="file-viewer">
      <div v-if="file" class="file-info">
        <el-descriptions title="文件信息" :column="2" border>
          <el-descriptions-item label="文件名">
            {{ file.name }}
          </el-descriptions-item>
          <el-descriptions-item label="大小">
            {{ formatFileSize(file.size) }}
          </el-descriptions-item>
          <el-descriptions-item label="修改时间">
            {{ formatDate(file.last_modified) }}
          </el-descriptions-item>
          <el-descriptions-item label="存储类型">
            <el-tag size="small">{{ file.storage_class }}</el-tag>
          </el-descriptions-item>
          <el-descriptions-item label="文件类型">
            {{ file.content_type || '未知' }}
          </el-descriptions-item>
          <el-descriptions-item label="ETag">
            {{ file.etag }}
          </el-descriptions-item>
        </el-descriptions>
      </div>

      <!-- 文件预览区域 -->
      <div class="preview-area" v-if="file">
        <!-- 图片预览 -->
        <div v-if="isImage" class="image-preview">
          <el-image
            :src="file.download_url"
            :alt="file.name"
            fit="contain"
            style="max-width: 100%; max-height: 500px;"
            :preview-src-list="[file.download_url]"
            preview-teleported
            loading="lazy"
          >
            <template #error>
              <div class="image-error">
                <el-icon><Picture /></el-icon>
                <p>图片加载失败</p>
              </div>
            </template>
          </el-image>
        </div>

        <!-- 文本文件预览 -->
        <div v-else-if="isText" class="text-preview">
          <el-card>
            <template #header>
              <div class="text-header">
                <span>文本内容预览</span>
                <el-button 
                  size="small" 
                  @click="downloadTextContent"
                  :icon="Download"
                >
                  下载原文件
                </el-button>
              </div>
            </template>
            <div v-if="textContent" class="text-content">
              <pre v-if="isCode" class="code-content">{{ textContent }}</pre>
              <div v-else class="plain-text">{{ textContent }}</div>
            </div>
            <div v-else-if="textError" class="text-error">
              <el-alert
                title="无法预览文本内容"
                :description="textError"
                type="warning"
                show-icon
              />
            </div>
          </el-card>
        </div>

        <!-- 视频预览 -->
        <div v-else-if="isVideo" class="video-preview">
          <video
            :src="file.download_url"
            controls
            style="max-width: 100%; max-height: 500px;"
            preload="metadata"
          >
            您的浏览器不支持视频播放。
          </video>
        </div>

        <!-- 音频预览 -->
        <div v-else-if="isAudio" class="audio-preview">
          <div class="audio-player">
            <el-icon size="48"><Headphone /></el-icon>
            <h3>{{ file.name }}</h3>
            <audio
              :src="file.download_url"
              controls
              style="width: 100%; margin-top: 10px;"
              preload="metadata"
            >
              您的浏览器不支持音频播放。
            </audio>
          </div>
        </div>

        <!-- PDF预览 -->
        <div v-else-if="isPDF" class="pdf-preview">
          <iframe
            :src="file.download_url"
            style="width: 100%; height: 600px; border: none;"
            title="PDF预览"
          >
            <p>您的浏览器不支持PDF预览。
              <a :href="file.download_url" target="_blank">点击下载</a>
            </p>
          </iframe>
        </div>

        <!-- Office文档预览 -->
        <div v-else-if="isOffice" class="office-preview">
          <div class="office-viewer">
            <iframe
              :src="getOfficeViewerUrl()"
              style="width: 100%; height: 600px; border: none;"
              title="Office文档预览"
            >
              <p>无法预览此Office文档。
                <a :href="file.download_url" target="_blank">点击下载</a>
              </p>
            </iframe>
          </div>
        </div>

        <!-- 不支持预览的文件 -->
        <div v-else class="unsupported-preview">
          <el-empty description="此文件类型不支持预览">
            <template #image>
              <el-icon size="100"><DocumentCopy /></el-icon>
            </template>
            <el-button 
              type="primary" 
              @click="downloadFile"
              :icon="Download"
            >
              下载文件
            </el-button>
          </el-empty>
        </div>
      </div>
    </div>

    <template #footer>
      <div class="dialog-footer">
        <el-button @click="handleClose">关闭</el-button>
        <el-button 
          type="primary" 
          @click="downloadFile"
          :icon="Download"
        >
          下载文件
        </el-button>
        <el-button 
          v-if="file?.download_url" 
          @click="openInNewTab"
          :icon="View"
        >
          新窗口打开
        </el-button>
      </div>
    </template>
  </el-dialog>
</template>

<script setup>
import { ref, computed, watch } from 'vue'
import { 
  Picture, Download, View, Headphone, DocumentCopy 
} from '@element-plus/icons-vue'
import { ElMessage } from 'element-plus'
import { s3Api } from '../services/api'

const props = defineProps({
  modelValue: Boolean,
  file: Object,
  bucketName: String
})

const emit = defineEmits(['update:modelValue', 'close'])

const visible = computed({
  get: () => props.modelValue,
  set: (value) => emit('update:modelValue', value)
})

const loading = ref(false)
const textContent = ref('')
const textError = ref('')

// 文件类型判断
const isImage = computed(() => {
  if (!props.file?.content_type) return false
  return props.file.content_type.startsWith('image/')
})

const isText = computed(() => {
  if (!props.file?.content_type && !props.file?.name) return false
  
  const textTypes = [
    'text/',
    'application/json',
    'application/xml',
    'application/javascript',
    'application/x-javascript'
  ]
  
  const textExtensions = [
    '.txt', '.log', '.md', '.json', '.xml', '.csv', 
    '.js', '.ts', '.vue', '.html', '.css', '.scss',
    '.py', '.java', '.cpp', '.c', '.h', '.php',
    '.rb', '.go', '.rs', '.sql', '.yml', '.yaml',
    '.ini', '.conf', '.config', '.env'
  ]
  
  // 检查MIME类型
  if (props.file.content_type) {
    if (textTypes.some(type => props.file.content_type.startsWith(type))) {
      return true
    }
  }
  
  // 检查文件扩展名
  const fileName = props.file.name.toLowerCase()
  return textExtensions.some(ext => fileName.endsWith(ext))
})

const isCode = computed(() => {
  if (!props.file?.name) return false
  
  const codeExtensions = [
    '.js', '.ts', '.vue', '.html', '.css', '.scss',
    '.py', '.java', '.cpp', '.c', '.h', '.php',
    '.rb', '.go', '.rs', '.sql', '.json', '.xml'
  ]
  
  const fileName = props.file.name.toLowerCase()
  return codeExtensions.some(ext => fileName.endsWith(ext))
})

const isVideo = computed(() => {
  if (!props.file?.content_type) return false
  return props.file.content_type.startsWith('video/')
})

const isAudio = computed(() => {
  if (!props.file?.content_type) return false
  return props.file.content_type.startsWith('audio/')
})

const isPDF = computed(() => {
  if (!props.file?.content_type && !props.file?.name) return false
  return props.file.content_type === 'application/pdf' || 
         props.file.name.toLowerCase().endsWith('.pdf')
})

const isOffice = computed(() => {
  if (!props.file?.content_type && !props.file?.name) return false
  
  const officeTypes = [
    'application/msword',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'application/vnd.ms-excel',
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    'application/vnd.ms-powerpoint',
    'application/vnd.openxmlformats-officedocument.presentationml.presentation'
  ]
  
  const officeExtensions = [
    '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx'
  ]
  
  if (props.file.content_type && officeTypes.includes(props.file.content_type)) {
    return true
  }
  
  if (props.file.name) {
    const fileName = props.file.name.toLowerCase()
    return officeExtensions.some(ext => fileName.endsWith(ext))
  }
  
  return false
})

// 加载文本内容
const loadTextContent = async () => {
  if (!props.file?.download_url) return
  
  loading.value = true
  textContent.value = ''
  textError.value = ''
  
  try {
    // 检查文件大小，避免加载过大的文件
    if (props.file.size > 1024 * 1024) { // 1MB
      textError.value = '文件过大，无法预览（超过1MB）'
      return
    }
    
    const response = await fetch(props.file.download_url)
    
    if (!response.ok) {
      throw new Error('无法获取文件内容')
    }
    
    const content = await response.text()
    textContent.value = content
    
  } catch (error) {
    console.error('加载文本内容失败:', error)
    textError.value = error.message || '加载文件内容失败'
  } finally {
    loading.value = false
  }
}

// 获取Office文档预览URL（使用Office Online）
const getOfficeViewerUrl = () => {
  if (!props.file?.download_url) return ''
  
  // 使用Microsoft Office Online查看器
  const encodedUrl = encodeURIComponent(props.file.download_url)
  return `https://view.officeapps.live.com/op/embed.aspx?src=${encodedUrl}`
}

// 下载文件
const downloadFile = () => {
  if (props.file?.download_url) {
    const link = document.createElement('a')
    link.href = props.file.download_url
    link.download = props.file.name
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  } else {
    ElMessage.error('无法获取下载链接')
  }
}

// 下载文本内容（用于文本预览时的原文件下载）
const downloadTextContent = () => {
  downloadFile()
}

// 在新窗口打开
const openInNewTab = () => {
  if (props.file?.download_url) {
    window.open(props.file.download_url, '_blank')
  }
}

// 关闭对话框
const handleClose = () => {
  visible.value = false
  emit('close')
}

// 格式化文件大小
const formatFileSize = (size) => {
  if (size < 1024) return size + ' B'
  if (size < 1024 * 1024) return (size / 1024).toFixed(1) + ' KB'
  if (size < 1024 * 1024 * 1024) return (size / (1024 * 1024)).toFixed(1) + ' MB'
  return (size / (1024 * 1024 * 1024)).toFixed(1) + ' GB'
}

// 格式化日期
const formatDate = (dateString) => {
  return new Date(dateString).toLocaleString()
}

// 监听文件变化，加载文本内容
watch([() => props.file, () => props.modelValue], () => {
  if (props.modelValue && props.file && isText.value) {
    loadTextContent()
  }
}, { immediate: true })
</script>

<style scoped>
.file-viewer {
  min-height: 400px;
}

.file-info {
  margin-bottom: 20px;
}

.preview-area {
  margin-top: 20px;
}

.image-preview {
  text-align: center;
  padding: 20px;
}

.image-error {
  display: flex;
  flex-direction: column;
  align-items: center;
  color: #999;
  padding: 40px;
}

.image-error .el-icon {
  font-size: 48px;
  margin-bottom: 10px;
}

.text-preview {
  margin-top: 20px;
}

.text-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.text-content {
  max-height: 500px;
  overflow-y: auto;
  background-color: #f8f9fa;
  border-radius: 4px;
  padding: 15px;
}

.code-content {
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  font-size: 14px;
  line-height: 1.5;
  white-space: pre-wrap;
  word-wrap: break-word;
  margin: 0;
  background-color: #f6f8fa;
  border: 1px solid #e1e4e8;
  border-radius: 6px;
  padding: 16px;
}

.plain-text {
  font-family: inherit;
  line-height: 1.6;
  white-space: pre-wrap;
  word-wrap: break-word;
}

.text-error {
  padding: 20px;
}

.video-preview {
  text-align: center;
  padding: 20px;
}

.audio-preview {
  padding: 40px;
  text-align: center;
}

.audio-player {
  max-width: 400px;
  margin: 0 auto;
}

.audio-player h3 {
  margin: 10px 0;
  color: #333;
}

.pdf-preview {
  margin-top: 20px;
}

.office-preview {
  margin-top: 20px;
}

.office-viewer {
  border-radius: 4px;
  overflow: hidden;
  border: 1px solid #ddd;
}

.unsupported-preview {
  padding: 40px;
  text-align: center;
}

.dialog-footer {
  text-align: right;
}

.dialog-footer .el-button {
  margin-left: 10px;
}

/* 响应式设计 */
@media (max-width: 768px) {
  .text-content {
    font-size: 12px;
  }
  
  .code-content {
    font-size: 12px;
    padding: 10px;
  }
  
  .audio-player {
    max-width: 100%;
  }
}
</style>
```

然后你需要在 `FileList.vue` 中集成这个预览组件。更新 `FileList.vue` 的操作列：

### 更新 frontend/src/components/FileList.vue

在操作列中添加预览按钮：

```vue
<!-- 在操作列中添加 -->
<el-table-column label="操作" width="250">
  <template #default="{ row }">
    <el-button 
      size="small" 
      type="success"
      @click="previewFile(row)"
      :icon="View"
    >
      预览
    </el-button>
    <el-button 
      size="small" 
      type="primary"
      @click="downloadFile(row)"
      :icon="Download"
    >
      下载
    </el-button>
    <el-button 
      size="small" 
      type="danger"
      @click="deleteFile(row)"
      :icon="Delete"
    >
      删除
    </el-button>
  </template>
</el-table-column>
```

在 script 部分添加：

```vue
<script setup>
// 导入 FileViewer 组件
import FileViewer from './FileViewer.vue'
import { View } from '@element-plus/icons-vue' // 添加 View 图标

// 添加预览相关的响应式数据
const showPreview = ref(false)
const previewFile = ref(null)

// 预览文件方法
const previewFile = (file) => {
  previewFile.value = file
  showPreview.value = true
}

// 关闭预览
const closePreview = () => {
  showPreview.value = false
  previewFile.value = null
}
</script>
```

在模板中添加 FileViewer 组件：

```vue
<template>
  <div class="file-list">
    <!-- 现有内容... -->
    
    <!-- 文件预览组件 -->
    <FileViewer
      v-model="showPreview"
      :file="previewFile"
      :bucket-name="props.bucketName"
      @close="closePreview"
    />
  </div>
</template>
```

这个 `FileViewer.vue` 组件提供了以下功能：

1. **多种文件类型预览**：
   - 图片：使用 el-image 组件预览
   - 文本文件：显示文本内容，支持代码高亮
   - 视频：HTML5 video 播放器
   - 音频：HTML5 audio 播放器
   - PDF：iframe 嵌入预览
   - Office文档：使用 Office Online 查看器

2. **文件信息显示**：
   - 文件名、大小、修改时间
   - 存储类型、文件类型、ETag

3. **交互功能**：
   - 下载文件
   - 在新窗口打开
   - 关闭预览

4. **错误处理**：
   - 图片加载失败提示
   - 文本文件过大提示
   - 不支持预览的文件类型处理

5. **响应式设计**：
   - 适配移动端显示
   - 自适应不同屏幕尺寸

现在你的S3文件管理器就有了完整的文件预览功能！
