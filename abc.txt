import psycopg2
from psycopg2 import sql

# 数据库连接参数
source_conn_params = "dbname='source_db' user='user1' host='source_host' port='5432' password='password'"
target_conn_params = "dbname='target_db' user='user2' host='target_host' port='5433' password='password'"

# 要迁移的表名
tables = ['table1', 'table2', 'table3']

def fetch_data(conn, table_name):
    """从源数据库中提取表数据"""
    cursor = conn.cursor()
    cursor.execute(sql.SQL("SELECT * FROM {}").format(sql.Identifier(table_name)))
    data = cursor.fetchall()
    cursor.close()
    return data

def create_table(target_conn, source_conn, table_name):
    """在目标数据库中创建表结构"""
    source_cursor = source_conn.cursor()
    source_cursor.execute(sql.SQL("SELECT column_name, data_type FROM information_schema.columns WHERE table_name = {}").format(sql.Literal(table_name)))
    columns = source_cursor.fetchall()
    
    target_cursor = target_conn.cursor()
    column_defs = ', '.join([f"{col[0]} {col[1]}" for col in columns])
    target_cursor.execute(sql.SQL("CREATE TABLE IF NOT EXISTS {} ({})").format(sql.Identifier(table_name), sql.SQL(column_defs)))
    target_conn.commit()
    target_cursor.close()
    source_cursor.close()

def copy_data(source_conn, target_conn, table_name):
    """将数据复制到目标数据库中"""
    data = fetch_data(source_conn, table_name)
    if not data:
        return  # 如果没有数据则直接返回

    target_cursor = target_conn.cursor()
    placeholders = ', '.join(['%s'] * len(data[0]))
    insert_query = sql.SQL("INSERT INTO {} VALUES ({})").format(
        sql.Identifier(table_name),
        sql.SQL(placeholders)
    )
    # 转换数据行为元组，确保不会传递字典
    data = [tuple(row) for row in data]
    target_cursor.executemany(insert_query.as_string(target_conn), data)
    target_conn.commit()
    target_cursor.close()

# 主函数
def main():
    source_conn = psycopg2.connect(source_conn_params)
    target_conn = psycopg2.connect(target_conn_params)
    
    for table in tables:
        print(f"Processing {table}")
        create_table(target_conn, source_conn, table)
        copy_data(source_conn, target_conn, table)
    
    source_conn.close()
    target_conn.close()

if __name__ == "__main__":
    main()
