我来为你添加文件详情弹窗功能。以下是修改后的代码：

## 后端修改 (main.py)

在现有代码基础上添加获取文件详情的API：

```python
# 在现有的main.py中添加以下内容

# 添加新的数据模型
class FileDetail(BaseModel):
    key: str
    name: str
    size: int
    last_modified: str
    content_type: str
    etag: str
    storage_class: str
    server_side_encryption: Optional[str] = None
    metadata: dict = {}
    url: str
    download_url: str

# 添加新的API路由
@app.get("/api/files/{file_key:path}/detail", response_model=FileDetail)
async def get_file_detail(file_key: str):
    try:
        # 获取文件的详细信息
        response = s3_client.head_object(Bucket=S3_BUCKET_NAME, Key=file_key)
        
        # 生成预签名URL用于预览
        preview_url = s3_client.generate_presigned_url(
            'get_object',
            Params={'Bucket': S3_BUCKET_NAME, 'Key': file_key},
            ExpiresIn=3600
        )
        
        # 生成下载URL
        download_url = s3_client.generate_presigned_url(
            'get_object',
            Params={
                'Bucket': S3_BUCKET_NAME, 
                'Key': file_key,
                'ResponseContentDisposition': f'attachment; filename="{file_key.split("/")[-1]}"'
            },
            ExpiresIn=3600
        )
        
        file_detail = FileDetail(
            key=file_key,
            name=file_key.split('/')[-1],
            size=response['ContentLength'],
            last_modified=response['LastModified'].isoformat(),
            content_type=response.get('ContentType', 'application/octet-stream'),
            etag=response['ETag'].strip('"'),
            storage_class=response.get('StorageClass', 'STANDARD'),
            server_side_encryption=response.get('ServerSideEncryption'),
            metadata=response.get('Metadata', {}),
            url=preview_url,
            download_url=download_url
        )
        
        return file_detail

    except ClientError as e:
        if e.response['Error']['Code'] == 'NoSuchKey':
            raise HTTPException(status_code=404, detail="File not found")
        logger.error(f"S3 error: {e}")
        raise HTTPException(status_code=500, detail=f"S3 error: {str(e)}")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")
```

## 前端修改 (src/App.vue)

完全替换App.vue的内容：

```vue
<template>
  <div id="app">
    <el-container>
      <el-header>
        <h1>S3 文件管理器</h1>
      </el-header>
      
      <el-main>
        <!-- 上传区域 -->
        <el-card class="upload-card" style="margin-bottom: 20px;">
          <el-upload
            class="upload-demo"
            :action="uploadUrl"
            :on-success="handleUploadSuccess"
            :on-error="handleUploadError"
            :before-upload="beforeUpload"
            drag
            multiple
          >
            <el-icon class="el-icon--upload"><Upload /></el-icon>
            <div class="el-upload__text">
              将文件拖到此处，或<em>点击上传</em>
            </div>
          </el-upload>
        </el-card>

        <!-- 搜索区域 -->
        <el-card style="margin-bottom: 20px;">
          <el-row :gutter="20">
            <el-col :span="12">
              <el-input
                v-model="searchPrefix"
                placeholder="输入文件名前缀搜索"
                @input="searchFiles"
                clearable
              >
                <template #prefix>
                  <el-icon><Search /></el-icon>
                </template>
              </el-input>
            </el-col>
            <el-col :span="6">
              <el-button type="primary" @click="loadFiles">刷新</el-button>
            </el-col>
          </el-row>
        </el-card>

        <!-- 文件列表 -->
        <el-card>
          <el-table 
            :data="files" 
            v-loading="loading"
            style="width: 100%"
          >
            <el-table-column prop="name" label="文件名" min-width="200">
              <template #default="scope">
                <el-link 
                  @click="showFileDetail(scope.row)"
                  :underline="false"
                  type="primary"
                  style="cursor: pointer;"
                >
                  {{ scope.row.name }}
                </el-link>
              </template>
            </el-table-column>
            
            <el-table-column prop="size" label="大小" width="120">
              <template #default="scope">
                {{ formatFileSize(scope.row.size) }}
              </template>
            </el-table-column>
            
            <el-table-column prop="last_modified" label="修改时间" width="180">
              <template #default="scope">
                {{ formatDate(scope.row.last_modified) }}
              </template>
            </el-table-column>
            
            <el-table-column label="操作" width="200">
              <template #default="scope">
                <el-button 
                  size="small" 
                  @click="downloadFile(scope.row)"
                  type="primary"
                >
                  下载
                </el-button>
                <el-button 
                  size="small" 
                  type="danger" 
                  @click="deleteFile(scope.row)"
                >
                  删除
                </el-button>
              </template>
            </el-table-column>
          </el-table>

          <!-- 分页 -->
          <div style="margin-top: 20px; text-align: center;">
            <el-pagination
              v-model:current-page="currentPage"
              v-model:page-size="pageSize"
              :page-sizes="[10, 20, 50, 100]"
              :total="total"
              layout="total, sizes, prev, pager, next, jumper"
              @size-change="handleSizeChange"
              @current-change="handleCurrentChange"
            />
          </div>
        </el-card>
      </el-main>
    </el-container>

    <!-- 文件详情弹窗 -->
    <el-dialog
      v-model="fileDetailVisible"
      :title="'文件详情 - ' + (fileDetail?.name || '')"
      width="70%"
      :close-on-click-modal="false"
    >
      <div v-if="fileDetail" v-loading="fileDetailLoading">
        <el-row :gutter="20">
          <!-- 左侧：文件预览 -->
          <el-col :span="12">
            <el-card header="文件预览" style="height: 400px;">
              <div class="preview-container">
                <!-- 图片预览 -->
                <div v-if="isImage(fileDetail.content_type)" class="image-preview">
                  <el-image
                    :src="fileDetail.url"
                    fit="contain"
                    style="max-width: 100%; max-height: 350px;"
                    :preview-src-list="[fileDetail.url]"
                  >
                    <template #error>
                      <div class="image-slot">
                        <el-icon><Picture /></el-icon>
                        <div>加载失败</div>
                      </div>
                    </template>
                  </el-image>
                </div>
                
                <!-- 文本文件预览 -->
                <div v-else-if="isText(fileDetail.content_type)" class="text-preview">
                  <el-input
                    v-model="fileContent"
                    type="textarea"
                    :rows="15"
                    readonly
                    placeholder="加载中..."
                  />
                </div>
                
                <!-- 其他文件类型 -->
                <div v-else class="file-icon">
                  <el-icon size="80"><Document /></el-icon>
                  <div style="margin-top: 10px; color: #999;">
                    {{ getFileTypeText(fileDetail.content_type) }}
                  </div>
                </div>
              </div>
            </el-card>
          </el-col>
          
          <!-- 右侧：文件信息 -->
          <el-col :span="12">
            <el-card header="文件信息" style="height: 400px; overflow-y: auto;">
              <el-descriptions :column="1" border>
                <el-descriptions-item label="文件名">
                  <el-text>{{ fileDetail.name }}</el-text>
                </el-descriptions-item>
                
                <el-descriptions-item label="文件路径">
                  <el-text type="info">{{ fileDetail.key }}</el-text>
                </el-descriptions-item>
                
                <el-descriptions-item label="文件大小">
                  <el-tag>{{ formatFileSize(fileDetail.size) }}</el-tag>
                </el-descriptions-item>
                
                <el-descriptions-item label="文件类型">
                  <el-tag type="success">{{ fileDetail.content_type }}</el-tag>
                </el-descriptions-item>
                
                <el-descriptions-item label="最后修改">
                  <el-text>{{ formatDate(fileDetail.last_modified) }}</el-text>
                </el-descriptions-item>
                
                <el-descriptions-item label="ETag">
                  <el-text type="info" style="font-family: monospace; font-size: 12px;">
                    {{ fileDetail.etag }}
                  </el-text>
                </el-descriptions-item>
                
                <el-descriptions-item label="存储类型">
                  <el-tag :type="getStorageClassType(fileDetail.storage_class)">
                    {{ fileDetail.storage_class }}
                  </el-tag>
                </el-descriptions-item>
                
                <el-descriptions-item 
                  v-if="fileDetail.server_side_encryption" 
                  label="加密方式"
                >
                  <el-tag type="warning">{{ fileDetail.server_side_encryption }}</el-tag>
                </el-descriptions-item>
              </el-descriptions>

              <!-- 元数据 -->
              <div v-if="Object.keys(fileDetail.metadata).length > 0" style="margin-top: 20px;">
                <el-divider content-position="left">元数据</el-divider>
                <el-descriptions :column="1" border size="small">
                  <el-descriptions-item 
                    v-for="(value, key) in fileDetail.metadata" 
                    :key="key" 
                    :label="key"
                  >
                    <el-text>{{ value }}</el-text>
                  </el-descriptions-item>
                </el-descriptions>
              </div>
            </el-card>
          </el-col>
        </el-row>
      </div>
      
      <template #footer>
        <span class="dialog-footer">
          <el-button @click="fileDetailVisible = false">关闭</el-button>
          <el-button type="primary" @click="downloadFileFromDetail">
            <el-icon><Download /></el-icon>
            下载文件
          </el-button>
          <el-button 
            type="success" 
            @click="copyFileUrl"
            v-if="fileDetail"
          >
            <el-icon><CopyDocument /></el-icon>
            复制链接
          </el-button>
        </span>
      </template>
    </el-dialog>
  </div>
</template>

<script>
import { ref, onMounted } from 'vue'
import axios from 'axios'
import { ElMessage, ElMessageBox } from 'element-plus'
import { 
  Upload, 
  Search, 
  Picture, 
  Document, 
  Download, 
  CopyDocument 
} from '@element-plus/icons-vue'

export default {
  name: 'App',
  components: {
    Upload,
    Search,
    Picture,
    Document,
    Download,
    CopyDocument
  },
  setup() {
    // 原有的响应式数据
    const files = ref([])
    const loading = ref(false)
    const currentPage = ref(1)
    const pageSize = ref(10)
    const total = ref(0)
    const searchPrefix = ref('')
    
    // 新增的响应式数据
    const fileDetailVisible = ref(false)
    const fileDetail = ref(null)
    const fileDetailLoading = ref(false)
    const fileContent = ref('')
    
    const baseURL = 'http://localhost:8000'
    const uploadUrl = `${baseURL}/api/upload`

    let searchTimeout = null

    // 原有的方法保持不变
    const loadFiles = async () => {
      loading.value = true
      try {
        const params = {
          page: currentPage.value,
          page_size: pageSize.value
        }
        
        if (searchPrefix.value) {
          params.prefix = searchPrefix.value
        }

        const response = await axios.get(`${baseURL}/api/files`, { params })
        
        files.value = response.data.files
        total.value = response.data.total
        
      } catch (error) {
        console.error('加载文件失败:', error)
        ElMessage.error('加载文件失败')
      } finally {
        loading.value = false
      }
    }

    const searchFiles = () => {
      if (searchTimeout) {
        clearTimeout(searchTimeout)
      }
      
      searchTimeout = setTimeout(() => {
        currentPage.value = 1
        loadFiles()
      }, 300)
    }

    const handleUploadSuccess = (response) => {
      ElMessage.success('文件上传成功')
      loadFiles()
    }

    const handleUploadError = (error) => {
      console.error('上传失败:', error)
      ElMessage.error('文件上传失败')
    }

    const beforeUpload = (file) => {
      const isLt100M = file.size / 1024 / 1024 < 100
      if (!isLt100M) {
        ElMessage.error('文件大小不能超过 100MB!')
        return false
      }
      return true
    }

    const deleteFile = async (file) => {
      try {
        await ElMessageBox.confirm(
          `确定要删除文件 "${file.name}" 吗？`,
          '确认删除',
          {
            confirmButtonText: '确定',
            cancelButtonText: '取消',
            type: 'warning',
          }
        )

        await axios.delete(`${baseURL}/api/files/${file.key}`)
        ElMessage.success('文件删除成功')
        loadFiles()
        
      } catch (error) {
        if (error !== 'cancel') {
          console.error('删除失败:', error)
          ElMessage.error('文件删除失败')
        }
      }
    }

    const downloadFile = (file) => {
      window.open(`${baseURL}/api/download/${file.key}`, '_blank')
    }

    const handleSizeChange = (val) => {
      pageSize.value = val
      currentPage.value = 1
      loadFiles()
    }

    const handleCurrentChange = (val) => {
      currentPage.value = val
      loadFiles()
    }

    const formatFileSize = (bytes) => {
      if (bytes === 0) return '0 Bytes'
      const k = 1024
      const sizes = ['Bytes', 'KB', 'MB', 'GB']
      const i = Math.floor(Math.log(bytes) / Math.log(k))
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
    }

    const formatDate = (dateString) => {
      return new Date(dateString).toLocaleString('zh-CN')
    }

    // 新增的方法
    const showFileDetail = async (file) => {
      fileDetailVisible.value = true
      fileDetailLoading.value = true
      fileContent.value = ''
      
      try {
        const response = await axios.get(`${baseURL}/api/files/${file.key}/detail`)
        fileDetail.value = response.data
        
        // 如果是文本文件，尝试加载内容
        if (isText(response.data.content_type) && response.data.size < 1024 * 1024) { // 小于1MB的文本文件
          try {
            const contentResponse = await axios.get(response.data.url)
            fileContent.value = contentResponse.data
          } catch (error) {
            fileContent.value = '无法加载文件内容'
          }
        }
        
      } catch (error) {
        console.error('获取文件详情失败:', error)
        ElMessage.error('获取文件详情失败')
        fileDetailVisible.value = false
      } finally {
        fileDetailLoading.value = false
      }
    }

    const isImage = (contentType) => {
      return contentType && contentType.startsWith('image/')
    }

    const isText = (contentType) => {
      return contentType && (
        contentType.startsWith('text/') ||
        contentType.includes('json') ||
        contentType.includes('xml') ||
        contentType.includes('javascript') ||
        contentType.includes('css')
      )
    }

    const getFileTypeText = (contentType) => {
      if (contentType.includes('pdf')) return 'PDF 文档'
      if (contentType.includes('word')) return 'Word 文档'
      if (contentType.includes('excel')) return 'Excel 表格'
      if (contentType.includes('powerpoint')) return 'PowerPoint 演示文稿'
      if (contentType.includes('zip')) return '压缩文件'
      if (contentType.includes('video')) return '视频文件'
      if (contentType.includes('audio')) return '音频文件'
      return '其他文件'
    }

    const getStorageClassType = (storageClass) => {
      const typeMap = {
        'STANDARD': '',
        'STANDARD_IA': 'info',
        'ONEZONE_IA': 'warning',
        'GLACIER': 'success',
        'DEEP_ARCHIVE': 'danger'
      }
      return typeMap[storageClass] || 'info'
    }

    const downloadFileFromDetail = () => {
      if (fileDetail.value) {
        window.open(fileDetail.value.download_url, '_blank')
      }
    }

    const copyFileUrl = async () => {
      if (fileDetail.value) {
        try {
          await navigator.clipboard.writeText(fileDetail.value.url)
          ElMessage.success('链接已复制到剪贴板')
        } catch (error) {
          // 降级方案
          const textArea = document.createElement('textarea')
          textArea.value = fileDetail.value.url
          document.body.appendChild(textArea)
          textArea.select()
          document.execCommand('copy')
          document.body.removeChild(textArea)
          ElMessage.success('链接已复制到剪贴板')
        }
      }
    }

    onMounted(() => {
      loadFiles()
    })

    return {
      // 原有的数据和方法
      files,
      loading,
      currentPage,
      pageSize,
      total,
      searchPrefix,
      uploadUrl,
      loadFiles,
      searchFiles,
      handleUploadSuccess,
      handleUploadError,
      beforeUpload,
      deleteFile,
      downloadFile,
      handleSizeChange,
      handleCurrentChange,
      formatFileSize,
      formatDate,
      
      // 新增的数据和方法
      fileDetailVisible,
      fileDetail,
      fileDetailLoading,
      fileContent,
      showFileDetail,
      isImage,
      isText,
      getFileTypeText,
      getStorageClassType,
      downloadFileFromDetail,
      copyFileUrl
    }
  }
}
</script>

<style>
#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.el-header {
  background-color: #409EFF;
  color: white;
  display: flex;
  align-items: center;
}

.el-header h1 {
  margin: 0;
}

.upload-card .el-upload-dragger {
  width: 100%;
}

.preview-container {
  height: 350px;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
}

.image-preview {
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.image-slot {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: 14px;
  color: #999;
}

.text-preview {
  width: 100%;
  height: 100%;
}

.file-icon {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  color: #999;
}

.dialog-footer {
  display: flex;
  justify-content: flex-end;
  gap: 10px;
}
</style>
```

## 主要新增功能

### 1. 文件详情弹窗
- 点击文件名触发详情弹窗
- 左侧显示文件预览（支持图片、文本文件）
- 右侧显示详细的文件信息

### 2. 文件预览功能
- **图片文件**: 直接显示图片，支持放大预览
- **文本文件**: 显示文件内容（限制1MB以下）
- **其他文件**: 显示文件类型图标

### 3. 详细的文件信息
- 基本信息：文件名、路径、大小、类型、修改时间
- S3信息：ETag、存储类型、加密方式
- 元数据：显示S3对象的自定义元数据

### 4. 增强的操作功能
- 从详情页直接下载文件
- 复制文件链接到剪贴板
- 不同存储类型的颜色标识

### 5. 用户体验优化
- 加载状态指示
- 错误处理和提示
- 响应式设计适配不同屏幕

## 支持的文件类型预览

- **图片**: jpg, png, gif, bmp, svg 等
- **文本**: txt, json, xml, css, js, html, md 等
- **其他**: 显示对应的文件类型图标和描述

这个增强版本提供了更丰富的文件管理体验，用户可以快速查看文件详情而无需下载文件。
