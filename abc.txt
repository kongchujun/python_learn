import asyncio

update_lock = asyncio.Lock()

async def create_pool():
    global _pg_pool, current_password
    async with update_lock:
        if _pg_pool:
            await _pg_pool.close()
        _pg_pool = await asyncpg.create_pool(
            database=os.environ["POSTGRES_DB"],
            user=os.environ["POSTGRES_USER"],
            password=current_password,
            host=os.environ["POSTGRES_HOST"],
            port=os.environ["POSTGRES_PORT"],
            init=_init_connection,
        )

async def get_pg_pool():
    await update_lock.acquire()
    try:
        return _pg_pool
    finally:
        update_lock.release()



async def get_connection():
    pool = await get_pg_pool()
    conn = await pool.acquire()
    try:
        # 假设有一个简单的方式来验证连接
        await conn.execute('SELECT 1')
        return conn
    except:
        pool.release(conn)
        raise

async def list_assistants(user_id: str) -> List[Assistant]:
    async with get_connection() as conn:
        return await conn.fetch("SELECT * FROM assistant WHERE user_id = $1", user_id)
