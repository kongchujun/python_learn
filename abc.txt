# database.py
import asyncio
import asyncpg
import httpx

DATABASE_URL = "postgresql://your_user@your_host/your_db"

pool = None  # 初始化连接池变量

async def fetch_password():
    """从指定的URL获取最新的数据库密码"""
    async with httpx.AsyncClient() as client:
        response = await client.get("http://your-password-server/password")
        response.raise_for_status()
        return response.text

async def create_pool(password):
    """根据提供的密码创建新的数据库连接池"""
    return await asyncpg.create_pool(dsn=f"{DATABASE_URL}:{password}@your_host/your_db")

async def refresh_connection_pool():
    """每2小时刷新数据库连接池"""
    global pool
    while True:
        password = await fetch_password()  # 获取最新密码
        if pool:
            await pool.close()  # 如果池已存在，则先关闭
        pool = await create_pool(password)  # 创建新的连接池
        await asyncio.sleep(7200)  # 等待7200秒或2小时

async def get_pool():
    """返回当前激活的连接池"""
    global pool
    if pool is None:
        password = await fetch_password()
        pool = await create_pool(password)
    return pool
