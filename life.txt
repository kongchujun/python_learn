package main

import (
    "encoding/json"
    "fmt"
    "io"
    "log"
    "net"
    "net/http"
    "sync"
    "time"
)

// Backend 存储当前数据库的目标地址
type Backend struct {
    Host     string
    Port     string
    Username string // 可选：存储用户名
    Password string // 可选：存储密码
}

// SecretRequest API 请求体结构
type SecretRequest struct {
    Host     string `json:"host"`
    Username string `json:"username"`
    Password string `json:"password"`
    Port     string `json:"port"`
}

var (
    backend     Backend
    backendLock sync.RWMutex
    listenPort  = "5466"     // 代理监听的端口
    apiPort     = "8080"     // API 监听的端口
)

func main() {
    // 初始化默认 backend
    backend = Backend{
        Host: "12.23.34.21",
        Port: "19211",
    }

    // 启动 API 服务
    go startAPIServer()

    // 启动 TCP 代理
    listener, err := net.Listen("tcp", ":"+listenPort)
    if err != nil {
        log.Fatalf("Failed to listen on port %s: %v", listenPort, err)
    }
    defer listener.Close()

    log.Printf("Dynamic proxy listening on :%s", listenPort)

    for {
        conn, err := listener.Accept()
        if err != nil {
            log.Printf("Failed to accept connection: %v", err)
            continue
        }
        go handleConnection(conn)
    }
}

// startAPIServer 启动 HTTP API 服务
func startAPIServer() {
    http.HandleFunc("/get_secret", handleGetSecret)
    log.Printf("API server listening on :%s", apiPort)
    if err := http.ListenAndServe(":"+apiPort, nil); err != nil {
        log.Fatalf("Failed to start API server: %v", err)
    }
}

// handleGetSecret 处理 /get_secret API 请求
func handleGetSecret(w http.ResponseWriter, r *http.Request) {
    if r.Method != http.MethodPost {
        http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
        return
    }

    var req SecretRequest
    if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
        http.Error(w, "Invalid request body", http.StatusBadRequest)
        return
    }

    // 验证请求参数
    if req.Host == "" || req.Port == "" {
        http.Error(w, "Host and port are required", http.StatusBadRequest)
        return
    }

    // 更新 backend
    backendLock.Lock()
    backend.Host = req.Host
    backend.Port = req.Port
    backend.Username = req.Username // 可选
    backend.Password = req.Password // 可选
    log.Printf("Backend updated: %s:%s", backend.Host, backend.Port)
    backendLock.Unlock()

    // 返回成功响应
    w.WriteHeader(http.StatusOK)
    fmt.Fprintf(w, "Backend updated to %s:%s", req.Host, req.Port)
}

// handleConnection 处理客户端连接并转发到 backend
func handleConnection(clientConn net.Conn) {
    defer clientConn.Close()

    // 获取当前 backend
    backendLock.RLock()
    targetAddr := fmt.Sprintf("%s:%s", backend.Host, backend.Port)
    backendLock.RUnlock()

    // 连接到 backend
    backendConn, err := net.DialTimeout("tcp", targetAddr, 5*time.Second)
    if err != nil {
        log.Printf("Failed to connect to backend %s: %v", targetAddr, err)
        return
    }
    defer backendConn.Close()

    // 双向数据转发
    errChan := make(chan error, 2)
    go func() {
        _, err := io.Copy(backendConn, clientConn)
        errChan <- err
    }()
    go func() {
        _, err := io.Copy(clientConn, backendConn)
        errChan <- err
    }()

    // 等待任一方向出错或完成
    select {
    case err := <-errChan:
        if err != nil {
            log.Printf("Connection error: %v", err)
        }
    }
}
