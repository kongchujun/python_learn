package main

import (
    "bufio"
    "encoding/json"
    "fmt"
    "io"
    "log"
    "net"
    "net/http"
    "sync"
)

// PasswordManager 管理 PostgreSQL 密码
type PasswordManager struct {
    currentPassword string
    mu              sync.RWMutex
}

// SetPassword 更新密码
func (pm *PasswordManager) SetPassword(newPassword string) {
    pm.mu.Lock()
    defer pm.mu.Unlock()
    pm.currentPassword = newPassword
    log.Printf("Password updated to: %s", newPassword)
}

// GetPassword 获取当前密码
func (pm *PasswordManager) GetPassword() string {
    pm.mu.RLock()
    defer pm.mu.RUnlock()
    return pm.currentPassword
}

// Config 代理配置
type Config struct {
    ProxyListenAddr   string // 代理监听地址，如 ":5433"
    PostgresAddr      string // 真实 PostgreSQL 地址，如 "postgres:5432"
    APIListenAddr     string // API 监听地址，如 ":8080"
    APIPasswordUpdate string // 密码更新 API 路径，如 "/update-password"
}

func main() {
    config := Config{
        ProxyListenAddr:   ":5433",
        PostgresAddr:      "postgres:5432",
        APIListenAddr:     ":8080",
        APIPasswordUpdate: "/update-password",
    }

    pm := &PasswordManager{currentPassword: "initial_password"}

    // 启动 HTTP API 服务
    go startAPIServer(config, pm)

    // 启动代理服务
    startProxyServer(config, pm)
}

// startAPIServer 启动 HTTP API 服务
func startAPIServer(config Config, pm *PasswordManager) {
    http.HandleFunc(config.APIPasswordUpdate, func(w http.ResponseWriter, r *http.Request) {
        if r.Method != http.MethodPost {
            http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
            return
        }

        var req struct {
            NewPassword string `json:"new_password"`
        }
        if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
            http.Error(w, "Invalid request body", http.StatusBadRequest)
            return
        }

        if req.NewPassword == "" {
            http.Error(w, "New password cannot be empty", http.StatusBadRequest)
            return
        }

        pm.SetPassword(req.NewPassword)
        w.WriteHeader(http.StatusOK)
        fmt.Fprintf(w, "Password updated successfully")
    })

    log.Printf("API server listening on %s", config.APIListenAddr)
    if err := http.ListenAndServe(config.APIListenAddr, nil); err != nil {
        log.Fatalf("API server failed: %v", err)
    }
}

// startProxyServer 启动代理服务
func startProxyServer(config Config, pm *PasswordManager) {
    listener, err := net.Listen("tcp", config.ProxyListenAddr)
    if err != nil {
        log.Fatalf("Failed to start proxy server: %v", err)
    }
    defer listener.Close()

    log.Printf("Proxy server listening on %s", config.ProxyListenAddr)

    for {
        clientConn, err := listener.Accept()
        if err != nil {
            log.Printf("Failed to accept client connection: %v", err)
            continue
        }

        go handleClientConnection(clientConn, config.PostgresAddr, pm)
    }
}

// handleClientConnection 处理客户端连接
func handleClientConnection(clientConn net.Conn, postgresAddr string, pm *PasswordManager) {
    defer clientConn.Close()

    // 连接到真实的 PostgreSQL 服务
    serverConn, err := net.Dial("tcp", postgresAddr)
    if err != nil {
        log.Printf("Failed to connect to PostgreSQL: %v", err)
        return
    }
    defer serverConn.Close()

    // 读取客户端的 StartupMessage（PostgreSQL 协议）
    clientReader := bufio.NewReader(clientConn)
    startupMsg, err := readStartupMessage(clientReader)
    if err != nil {
        log.Printf("Failed to read startup message: %v", err)
        return
    }

    // 修改认证信息（替换密码）
    startupMsg = modifyStartupMessage(startupMsg, pm.GetPassword())

    // 将修改后的 StartupMessage 发送到 PostgreSQL
    if _, err := serverConn.Write(startupMsg); err != nil {
        log.Printf("Failed to send startup message to PostgreSQL: %v", err)
        return
    }

    // 双向转发数据
    go io.Copy(serverConn, clientReader)
    io.Copy(clientConn, serverConn)
}

// readStartupMessage 读取 PostgreSQL StartupMessage
func readStartupMessage(reader *bufio.Reader) ([]byte, error) {
    // 简单示例：读取固定长度的 StartupMessage
    // 实际需要解析 PostgreSQL 协议（参见协议文档）
    buf := make([]byte, 1024)
    n, err := reader.Read(buf)
    if err != nil {
        return nil, err
    }
    return buf[:n], nil
}

// modifyStartupMessage 修改 StartupMessage 中的密码
func modifyStartupMessage(msg []byte, newPassword string) []byte {
    // 简化处理：实际需要解析 PostgreSQL 协议的 StartupMessage
    // 这里假设直接附加新密码（仅为示例）
    // 真实场景需解析参数键值对，替换 "password" 参数
    return append(msg, []byte(fmt.Sprintf("password=%s", newPassword))...)
}
