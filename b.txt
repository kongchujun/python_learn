我明白问题了！文件上传成功但文件夹列表没有更新。让我帮你调试和修复这个问题。

## 问题排查和修复

### 1. 首先检查后端API是否正常工作

在浏览器中直接访问：`http://localhost:8000/api/folders`

看看返回的数据是否包含新上传的文件夹。

### 2. 修复后端 folders API

后端的 `list_folders` 方法可能有缓存或逻辑问题，让我优化一下：

```python
# 在 main.py 中修改 list_folders 方法
@app.get("/api/folders", response_model=FoldersResponse)
async def list_folders():
    try:
        # 使用更大的MaxKeys确保获取所有文件
        all_objects = []
        continuation_token = None
        
        while True:
            list_params = {
                'Bucket': S3_BUCKET_NAME,
                'MaxKeys': 1000
            }
            
            if continuation_token:
                list_params['ContinuationToken'] = continuation_token
            
            response = s3_client.list_objects_v2(**list_params)
            
            if 'Contents' in response:
                all_objects.extend(response['Contents'])
            
            # 检查是否有更多数据
            if not response.get('IsTruncated', False):
                break
                
            continuation_token = response.get('NextContinuationToken')
        
        if not all_objects:
            return FoldersResponse(folders=[])

        # 统计文件夹和文件数量
        folder_counts = {}
        
        for obj in all_objects:
            key = obj['Key']
            # 获取第一层路径
            if '/' in key:
                folder_name = key.split('/')[0]
                folder_counts[folder_name] = folder_counts.get(folder_name, 0) + 1
            else:
                # 根目录文件
                folder_counts['根目录'] = folder_counts.get('根目录', 0) + 1

        # 转换为列表并排序
        folders = [
            FolderInfo(name=name, count=count) 
            for name, count in sorted(folder_counts.items())
        ]

        logger.info(f"Found {len(folders)} folders: {[f.name for f in folders]}")
        return FoldersResponse(folders=folders)

    except ClientError as e:
        logger.error(f"S3 error: {e}")
        raise HTTPException(status_code=500, detail=f"S3 error: {str(e)}")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")
```

### 3. 修复前端的文件夹加载逻辑

修改前端 `App.vue` 中的相关方法：

```javascript
// 在 setup() 函数中修改以下方法

const loadFolders = async () => {
  try {
    console.log('开始加载文件夹列表...')
    const response = await axios.get(`${baseURL}/api/folders`)
    console.log('文件夹数据:', response.data)
    folders.value = response.data.folders
    console.log('更新后的文件夹列表:', folders.value)
  } catch (error) {
    console.error('加载文件夹失败:', error)
    ElMessage.error('加载文件夹失败')
  }
}

// 修改上传成功处理
const submitUpload = async () => {
  if (fileList.value.length === 0) {
    ElMessage.warning('请先选择文件')
    return
  }

  uploading.value = true
  
  try {
    const formData = new FormData()
    
    // 添加文件
    fileList.value.forEach(file => {
      formData.append('files', file.raw)
    })
    
    // 添加参数
    if (uploadFolder.value) {
      formData.append('folder', uploadFolder.value)
    }
    formData.append('keep_original_name', keepOriginalName.value)

    console.log('开始上传文件...')
    const response = await axios.post(`${baseURL}/api/upload/batch`, formData, {
      headers: {
        'Content-Type': 'multipart/form-data'
      }
    })

    console.log('上传响应:', response.data)

    if (response.data.success) {
      ElMessage.success(response.data.message)
    } else {
      ElMessage.warning(response.data.message)
      if (response.data.failed_files.length > 0) {
        console.error('Failed files:', response.data.failed_files)
      }
    }

    // 清空文件列表
    clearFiles()
    
    // 延迟一下再刷新，确保S3数据同步
    console.log('开始刷新数据...')
    setTimeout(async () => {
      await loadFolders()
      await loadFiles()
      
      // 如果上传到了新文件夹，自动选择该文件夹
      if (uploadFolder.value && !selectedFolder.value) {
        const targetFolder = uploadFolder.value.split('/')[0]
        console.log('自动选择文件夹:', targetFolder)
        selectedFolder.value = targetFolder
        await loadFiles()
      }
    }, 1000) // 延迟1秒

  } catch (error) {
    console.error('上传失败:', error)
    ElMessage.error('文件上传失败')
  } finally {
    uploading.value = false
  }
}

// 添加一个手动刷新文件夹的方法
const refreshFolders = async () => {
  console.log('手动刷新文件夹列表')
  await loadFolders()
  ElMessage.success('文件夹列表已刷新')
}
```

### 4. 在模板中添加调试按钮

在搜索区域添加一个调试按钮：

```vue
<!-- 在搜索和过滤区域的按钮组中添加 -->
<el-col :span="6">
  <el-button type="primary" @click="loadFiles">刷新文件</el-button>
  <el-button type="success" @click="refreshFolders">刷新文件夹</el-button>
  <el-button @click="clearFilters">清空过滤</el-button>
</el-col>
```

### 5. 添加调试信息显示

在文件夹选择器下方添加调试信息：

```vue
<!-- 在文件夹选择器后添加调试信息 -->
<el-col :span="8">
  <el-select
    v-model="selectedFolder"
    placeholder="选择文件夹"
    clearable
    @change="handleFolderChange"
    style="width: 100%"
  >
    <el-option label="全部文件夹" value="">
      <span style="float: left">全部文件夹</span>
      <span style="float: right; color: #8492a6; font-size: 13px">
        {{ totalFiles }}
      </span>
    </el-option>
    <el-option
      v-for="folder in folders"
      :key="folder.name"
      :label="folder.name"
      :value="folder.name"
    >
      <span style="float: left">{{ folder.name }}</span>
      <span style="float: right; color: #8492a6; font-size: 13px">
        {{ folder.count }}
      </span>
    </el-option>
  </el-select>
  
  <!-- 调试信息 -->
  <div style="margin-top: 4px; font-size: 12px; color: #999;">
    当前文件夹数量: {{ folders.length }}
    <el-button type="text" size="small" @click="console.log('文件夹列表:', folders)">
      查看详情
    </el-button>
  </div>
</el-col>
```

### 6. 完整的调试步骤

1. **检查浏览器控制台**：
   - 打开开发者工具
   - 查看上传时的console.log输出
   - 检查是否有API请求错误

2. **手动测试API**：
   ```bash
   # 直接访问文件夹API
   curl http://localhost:8000/api/folders
   ```

3. **检查S3存储桶**：
   - 直接登录AWS控制台查看文件是否真的上传到了指定路径

4. **测试步骤**：
   - 上传文件到新文件夹（如 "test-folder"）
   - 点击"刷新文件夹"按钮
   - 查看控制台输出
   - 检查下拉列表是否更新

### 7. 如果问题仍然存在

如果上述修复不起作用，请提供：

1. **浏览器控制台的完整输出**
2. **直接访问 `http://localhost:8000/api/folders` 的返回结果**
3. **上传文件时的网络请求详情**

这样我可以更准确地定位问题所在。

尝试这些修复后，文件夹列表应该能正确更新了。记住点击"刷新文件夹"按钮来手动测试功能是否正常。
