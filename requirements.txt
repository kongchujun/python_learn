import os
import asyncio
from datetime import datetime, timezone

import openai
openai.api_key = os.getenv("OPENAI_API_KEY")

from graphiti_core import Graphiti
from graphiti_core.nodes import EpisodeType

class ChatMemoryAgent:
    def __init__(self, neo4j_uri=None, user="neo4j", password=None, group_id="default"):
        self.group_id = group_id
        self.g = Graphiti(neo4j_uri, user, password)

    async def init(self):
        await self.g.build_indices_and_constraints()

    async def process_message(self, query: str) -> str:
        # 1. 从 Graphiti 检索与 query 相关的 facts（以 edge 形式返回）
        results = await self.g.search(
            query=query,
            num_results=5,
            group_ids=[self.group_id],
            search_scope="edges"
        )

        # 2. 构建提炼的 context 文本，注入系统 prompt
        facts_text = "\n".join(f"- {r.fact}" for r in results if r.fact)
        system_prompt = f"You are an assistant that remembers user history.\n\nRelevant facts:\n{facts_text or '＊无已知历史＊'}"

        # 3. 调用 LLM 生成回答
        resp = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": query}
            ],
            temperature=0.0
        )
        answer = resp.choices[0].message.content.strip()

        # 4. 把此次对话 turn 添加为新的 memory episode
        ep = f"User: {query}\nAssistant: {answer}"
        await self.g.add_episode(
            name=f"turn_{datetime.now(timezone.utc).timestamp()}",
            episode_body=ep,
            source=EpisodeType.message,
            source_description="chat turn",
            reference_time=datetime.now(timezone.utc),
            group_id=self.group_id
        )

        return answer

    async def close(self):
        await self.g.close()

async def main():
    ambot = ChatMemoryAgent(
        neo4j_uri=os.getenv("NEO4J_URI"),
        user=os.getenv("NEO4J_USER"),
        password=os.getenv("NEO4J_PASSWORD"),
        group_id="user_1234"
    )
    await ambot.init()

    questions = [
        "我叫 Alice，我最喜欢机器学习。",
        "请问我的名字是什么？",
        "我喜欢什么领域？"
    ]

    for q in questions:
        a = await ambot.process_message(q)
        print("→ Bot:", a, "\n")

    await ambot.close()

if __name__ == "__main__":
    asyncio.run(main())
